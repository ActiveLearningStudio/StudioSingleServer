version: "3.7"
services:
  currikiprod1-postgres:
    image: "postgres"
    container_name: currikiprod1-postgres
    restart: unless-stopped
    tty: true
    ports:
      - ${POSTGRES_EXPOSED_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/currikiprod1-postgresdata/
    volumes:
      - currikiprod1-postgresdata:/var/lib/postgresql/data/currikiprod1-postgresdata/
      - ./postgresscripts:/postgresscripts
      - ./postgresscripts/setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
      - ./postgresscripts/traxdb.sql:/docker-entrypoint-initdb.d/traxdb.sql:ro
      # - ./data/postgres/postgresql.conf:/var/lib/postgresql/data/currikiprod1-postgresdata/abc/postgresql.conf

 # currikiprod1-pgadmin:
  #   image: dpage/pgadmin4:4.18
  #   container_name: currikiprod1-pgadmin
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #     PGADMIN_LISTEN_PORT: 80
  #   ports:
  #     - ${PGADMIN_EXPOSED_PORT}:80
  #   volumes:
  #     - pgadmin1-data:/var/lib/pgadmin
  #     - ./postgresscripts:/postgresscripts
  #   links:
  #     - "currikiprod1-postgres:pgsql-server"
  #   networks:
  #     - currikiprod1-laravel
  

  currikiprod1-mysql:
    image: mysql:5.7.22
    container_name: currikiprod1-mysql
    restart: unless-stopped
    tty: true
    volumes:
      - currikiprod1-mysqldata:/var/lib/mysql
      - ./mysqlscripts/tsugisetup.sql:/docker-entrypoint-initdb.d/tsugisetup.sql:ro
      # - ./tmp/database/setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
      # - ./tmp/database/install_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./mysqlscripts:/mysqlscripts
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    # command: mysqld --init-file="/tmp/database/install_db.sql"
    ports:
      - ${MYSQL_LOCAL_PORT}:3306
    

  # currikiprod1-phpmyadmin:
  #   depends_on:
  #     - currikiprod1-mysql
  #   image: phpmyadmin/phpmyadmin
  #   container_name: currikiprod1-phpmyadmin
  #   restart: always
  #   ports:
  #     - ${PHPMYADMIN_EXPOSED_PORT}:80
  #   volumes:
  #     - ./php.ini:/usr/local/etc/php/php.ini
  #   environment:
  #     PMA_HOST: currikiprod1-mysql
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     PMA_ABSOLUTE_URI: ${PMA_ABSOLUTE_URI}
  #   networks:
  #     - currikiprod1-laravel

  currikiprod-nginx:
    image: nginx:1.15-alpine
    restart: always
    container_name: currikiprod-nginx
    volumes:
      - ./data/nginx/prod-conf:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/nginx/log:/var/log/nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - currikiprod-client
      - currikiprod-api
      - currikiprod-trax
      - currikiprod-tsugi
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 30
        window: 120s

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

    
  currikiprod-api:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./api
    container_name: currikiprod-api
    image: quay.io/curriki/api:${TAG}
    ports:
      - 9001:80
      # - 4003:4003
    volumes:
      - ./api/storage:/var/www/html/storage
      - ./api/.env:/var/www/html/.env
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: sh -c "[ -f /var/www/html/health.ok ]"
      interval: 10s
      timeout: 3s
      start_period: 10s
      retries: 30

  currikiprod-cron:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./api
    container_name: currikiprod-cron
    image: quay.io/curriki/cron:${TAG}
    # ports:
    #   - 4003:4003
    volumes:
      - ./api/storage:/var/www/html/storage
      - ./api/.env:/var/www/html/.env
    restart: always
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: sh -c "[ -f /var/www/html/health.ok ]"
      interval: 10s
      timeout: 3s
      start_period: 10s
      retries: 30
  

  currikiprod-client:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./client
    image: quay.io/curriki/client:${TAG}
    container_name: currikiprod-client
    volumes:
      - ./client/.env.local:/app/.env.local
      - ./client/.env:/usr/share/nginx/html/.env
    restart: always
    env_file:
      - ./client/.env
    ports:
      - 3000:80
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 120
        window: 120s
    healthcheck:
      test: sh -c "[ -f /usr/share/nginx/html/health.ok ]"
      interval: 10s
      timeout: 3s
      start_period: 30s
      retries: 30



  currikiprod-trax:
    build:
      dockerfile: ./Dockerfile
      context: ./trax-lrs
    image: quay.io/curriki/trax:latest
    container_name: currikiprod-trax
    ports:
      - 6900:6900
    volumes:
      - ./trax-lrs/storage:/var/www/html/storage
      - ./trax-lrs/.env:/var/www/html/.env
    restart: always
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: sh -c "[ -f /var/www/html/health.ok ]"
      interval: 10s
      timeout: 3s
      start_period: 10s
      retries: 30

  currikiprod-tsugi:
    build:
      dockerfile: ./Dockerfile
      context: ./tsugi
    image: quay.io/curriki/tsugi:${TAG}
    container_name: currikiprod-tsugi
    ports:
      - 6300:80
    volumes:
      - ./tsugi/config.php:/var/www/html/tsugi/config.php
      - ./tsugi/mod/curriki/config.php:/var/www/html/tsugi/mod/curriki/config.php
    restart: always
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: sh -c "[ -f /var/www/html/tsugi/health.ok ]"
      interval: 10s
      timeout: 3s
      start_period: 10s
      retries: 30



volumes: #provide volume
  currikiprod1-mysqldata:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/DBData/currikiprod1-mysqldata
  currikiprod1-postgresdata:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/DBData/currikiprod1-postgresdata
  pgadmin1-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/DBData/pgadmin1-data


    
 
  

  
    
